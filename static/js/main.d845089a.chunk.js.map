{"version":3,"sources":["weather.js","App.js","index.js","weather.module.css"],"names":["Weather","city","code","desc","temp","feel","cloud","sunrise","sunset","sunriseTime","Date","toUTCString","slice","sunsetTime","className","style","weather","Math","round","App","useState","setWeather","search","setSearch","query","setQuery","getWeather","a","console","log","fetch","response","ok","json","data","alert","useEffect","main","clouds","all","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","key","id","name","sys","country","description","feels_like","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6OA+BeA,EA5BC,SAAC,GAA8D,IAAD,IAA3DC,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAI1DC,EAFU,IAAIC,KAAe,IAAVH,GACCI,cACIC,OAAO,IAAK,GAKpCC,EAFW,IAAIH,KAAc,IAATF,GACEG,cACEC,OAAO,IAAK,GAE1C,OACC,yBAAKE,UAAWC,IAAMC,SACrB,kDACsBf,EADtB,KAC8BC,GAE9B,4BACC,wCAAcC,GACd,6CAAqBC,GAArB,EAA8Ba,KAAKC,MAAMd,IAApBA,KAArB,YACA,4CAAoBC,GAApB,EAA6BY,KAAKC,MAAMb,IAApBA,KAApB,YACA,2CAAiBC,EAAjB,KACA,wCAAcG,EAAd,OACA,uCAAaI,EAAb,UCwEWM,G,MA7FH,WACX,IADiB,EAGaC,mBAAS,IAHtB,mBAGVJ,EAHU,KAGDK,EAHC,OAIWD,mBAAS,IAJpB,mBAIVE,EAJU,KAIFC,EAJE,OAKSH,mBAAS,IALlB,mBAKVI,EALU,KAKHC,EALG,KAOXC,EAAU,uCAAG,8BAAAC,EAAA,kEAGjBC,QAAQC,IAAc,KAAVL,GACE,KAAVA,EAJa,iCAKOM,MAAM,qDAAD,OAC0BN,EAD1B,+BAXf,qCAMG,YAKVO,EALU,QAQHC,GARG,iCASID,EAASE,OATb,OASTC,EATS,OAUfb,EAAWa,GACXN,QAAQC,IAAIK,GAXG,wBAafC,MAAM,8CAbS,0DAmBjBP,QAAQC,IAAR,MACAM,MAAM,EAAD,IApBY,0DAAH,qDAwBhBC,qBAAU,WACTV,MAEE,CAACF,IAYJ,OACC,yBACCV,UACwB,oBAAhBE,EAAQqB,KACXrB,EAAQqB,KAAKjC,KAAO,GAAOY,EAAQsB,OAAOC,IAAM,GAChD,iBACCvB,EAAQqB,KAAKjC,KAAO,GAAOY,EAAQsB,OAAOC,IAAM,GACjD,mBACCvB,EAAQqB,KAAKjC,KAAO,GAAOY,EAAQsB,OAAOC,IAAM,GACjD,kBACA,MACD,OAGJ,wBAAIzB,UAAU,SAAd,eACA,0BAAM0B,SArBU,SAACC,GAClBA,EAAEC,iBACFjB,EAASH,GACTC,EAAU,KAkBkBT,UAAU,eACpC,2BACCA,UAAU,aACV6B,KAAK,OACLC,YAAY,YACZC,MAAOvB,EACPwB,SA/BiB,SAACL,GACrBlB,EAAUkB,EAAEM,OAAOF,UAgCjB,4BAAQ/B,UAAU,gBAAgB6B,KAAK,UAAvC,WAIuB,oBAAhB3B,EAAQqB,KACf,yBAAKvB,UAAU,WACd,kBAAC,EAAD,CACCkC,IAAKhC,EAAQiC,GACbhD,KAAMe,EAAQkC,KACdhD,KAAMc,EAAQmC,IAAIC,QAClBjD,KAAMa,EAAQA,QAAQ,GAAGqC,YACzBjD,KAAMY,EAAQqB,KAAKjC,KACnBC,KAAMW,EAAQqB,KAAKiB,WACnBhD,MAAOU,EAAQsB,OAAOC,IACtBhC,QAASS,EAAQmC,IAAI5C,QACrBC,OAAQQ,EAAQmC,IAAI3C,UAItB,CAAC,OCxFL+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,QAAU,2B","file":"static/js/main.d845089a.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./weather.module.css\";\n\nconst Weather = ({ city, code, desc, temp, feel, cloud, sunrise, sunset }) => {\n\t// convert unix to sunrise\n\tconst dateObj = new Date(sunrise * 1000);\n\tconst utcString = dateObj.toUTCString();\n\tconst sunriseTime = utcString.slice(-11, -4);\n\n\t// convert unix to sunset\n\tconst dateObj2 = new Date(sunset * 1000);\n\tconst utcString2 = dateObj2.toUTCString();\n\tconst sunsetTime = utcString2.slice(-11, -4);\n\n\treturn (\n\t\t<div className={style.weather}>\n\t\t\t<p>\n\t\t\t\tCurrent Weather For {city}, {code}\n\t\t\t</p>\n\t\t\t<ul>\n\t\t\t\t<li>Summary: {desc}</li>\n\t\t\t\t<li>Temperature: {({ temp } = Math.round(temp))}°c</li>\n\t\t\t\t<li>Feels like: {({ feel } = Math.round(feel))}°c</li>\n\t\t\t\t<li>Cloudiness: {cloud}%</li>\n\t\t\t\t<li>Sunrise: {sunriseTime} AM</li>\n\t\t\t\t<li>Sunset: {sunsetTime} PM</li>\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Weather;\n","import React, { useEffect, useState } from \"react\";\nimport Weather from \"./weather\";\nimport \"./App.css\";\n\nconst App = () => {\n\tconst API_KEY = \"e55f6512fa859d8ffa450609930032ad\";\n\n\tconst [weather, setWeather] = useState([]);\n\tconst [search, setSearch] = useState(\"\");\n\tconst [query, setQuery] = useState(\"\");\n\n\tconst getWeather = async () => {\n\t\ttry {\n\t\t\t// if query isn't an empty string then we run the code for getWeather()\n\t\t\tconsole.log(query !== \"\");\n\t\t\tif (query !== \"\") {\n\t\t\t\tconst response = await fetch(\n\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${API_KEY}`\n\t\t\t\t);\n\t\t\t\tif (response.ok) {\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tsetWeather(data);\n\t\t\t\t\tconsole.log(data);\n\t\t\t\t} else {\n\t\t\t\t\talert(\"City not in database / Check your spelling\");\n\t\t\t\t}\n\t\t\t\t// if the query is an empty string then we don't run the code\n\t\t\t}\n\t\t\t// throw new Error(\"Request failed\");\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\talert(error);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tgetWeather();\n\t\t// eslint-disable-next-line\n\t}, [query]);\n\n\tconst updateSearch = (e) => {\n\t\tsetSearch(e.target.value);\n\t};\n\n\tconst getSearch = (e) => {\n\t\te.preventDefault();\n\t\tsetQuery(search);\n\t\tsetSearch(\"\");\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={\n\t\t\t\ttypeof weather.main != \"undefined\"\n\t\t\t\t\t? (weather.main.temp > 20) & (weather.clouds.all < 50)\n\t\t\t\t\t\t? \"background-sun\"\n\t\t\t\t\t\t: (weather.main.temp < 20) & (weather.clouds.all < 50)\n\t\t\t\t\t\t? \"background-nosun\"\n\t\t\t\t\t\t: (weather.main.temp < 20) & (weather.clouds.all > 50)\n\t\t\t\t\t\t? \"background-jack\"\n\t\t\t\t\t\t: \"App\"\n\t\t\t\t\t: \"App\"\n\t\t\t}\n\t\t>\n\t\t\t<h1 className=\"title\">Weather App</h1>\n\t\t\t<form onSubmit={getSearch} className=\"search-form\">\n\t\t\t\t<input\n\t\t\t\t\tclassName=\"search-bar\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"City name\"\n\t\t\t\t\tvalue={search}\n\t\t\t\t\tonChange={updateSearch}\n\t\t\t\t/>\n\t\t\t\t<button className=\"search-button\" type=\"submit\">\n\t\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t\t{typeof weather.main != \"undefined\" ? (\n\t\t\t\t<div className=\"weather\">\n\t\t\t\t\t<Weather\n\t\t\t\t\t\tkey={weather.id}\n\t\t\t\t\t\tcity={weather.name}\n\t\t\t\t\t\tcode={weather.sys.country}\n\t\t\t\t\t\tdesc={weather.weather[0].description}\n\t\t\t\t\t\ttemp={weather.main.temp}\n\t\t\t\t\t\tfeel={weather.main.feels_like}\n\t\t\t\t\t\tcloud={weather.clouds.all}\n\t\t\t\t\t\tsunrise={weather.sys.sunrise}\n\t\t\t\t\t\tsunset={weather.sys.sunset}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t[\"\"]\n\t\t\t)}\n\t\t</div>\n\t);\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"weather_weather__1Qz_2\"};"],"sourceRoot":""}